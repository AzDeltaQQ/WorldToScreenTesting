Of course. The provided disassembly dump is incredibly rich and gives us a deep understanding of the CGWorldFrame class, its role in the engine, and its relationship to the functions we've analyzed.

Here is a comprehensive summary of what we can now say with 100% confidence.

The CGWorldFrame Class: The World's Engine Core

The functions and data provided describe a central C++ class, CGWorldFrame, which acts as the primary singleton for managing and orchestrating the entire game world's state for a given frame. It is the "engine" that drives updates, handles interactions, and prepares the scene for rendering.

I. Class Lifecycle

The creation and destruction of the WorldFrame object are clearly defined:

Allocation & Construction (allocateAndInitializeWorldFrame at 0x50F3F0):

This function acts as a factory. It allocates memory for the CGWorldFrame object.

It then calls the main constructor, InitializeWorldFrame.

Constructor (InitializeWorldFrame at 0x4FABD0):

This is the C++ constructor (__thiscall). It performs extensive initialization of the object's member variables.

It sets up multiple virtual function tables (vtables) at offsets +0x0 and +0x20.

It initializes numerous member variables, including flags, linked-list heads, and the View-Projection matrix at +0x340h (to an identity matrix initially).

Critically, it allocates memory for and constructs the active CCamera object, storing the pointer at this + 0x7E20h.

Finally, it assigns its own this pointer to the global variable WorldFrame (at 0x00B7436C), making it the active, global instance.

Destructor (destroyWorldFrame at 0x4FAF60):

This is the C++ destructor, called via the virtual destructor CGWorldFrame__vector_deleting_destructor (0x4FA560).

It calls shutdownWorldAndReleaseResources to clean up all associated game objects, memory, and resources tied to the world.

II. Core Responsibilities (The Main Loop)

The function UpdateGameWorldFrame (0x4FA5F0) is the heart of the class. It is called once per frame and orchestrates all major world updates in a specific order:

Camera & Player Updates: It finds the player and the active camera target. It calls updateCameraTransformAndState to position the camera based on player input, vehicle state, or cinematic control.

Animation & Physics: It calls process_animation_unit_chain and forwardPhysicsEvent to update object animations and simulate physics for the frame.

Sound: It updates the sound listener's position based on the camera's final position and orientation.

Event Dispatch: It calls enumVisibleObjects with processWorldFrameEvent as a callback. This iterates through all visible objects and tells each one to run its own update logic (e.g., AI, state transitions, spell effects).

Matrix Finalization: It finalizes the View-Projection matrix ([this+340h]) based on the updated camera state.

Rendering: It calls render_world_from_camera (0x739630) which ultimately queues the scene to be drawn by the graphics device.

UI & Interaction: It calls updateGameUiInteractionTarget to process mouseovers and target selection.

III. Deduced CGWorldFrame Class Layout

From InitializeWorldFrame and the other functions, we can deduce a partial memory layout of the class. All offsets are from the start of the CGWorldFrame instance.

Offset(s)	Type	Confirmed Purpose
+0x00	void**	Pointer to the primary virtual function table (vtable). Includes destroyWorldFrame.
+0x20	void**	Pointer to a secondary vtable. Includes CGWorldFrame__vector_deleting_destructor.
+0x2D8h	int	Interaction type flag. Used in a switch statement in processWorldFrameInteraction to decide if a click is on terrain, a UI element, or an object.
+0x320h - +0x33Ch	float[8]	Viewport and screen dimension parameters. Used by WorldToScreen.
+0x340h	Matrix4x4	View-Projection Matrix. This is the fully combined matrix used by WorldToScreen to transform points from view space to clip space.
+0xB10h	int	Render flags. Set to 2 if the View-Projection matrix changes, signaling a need to update shaders or other components.
+0xB14h	float	Time delta. Stores the time elapsed since the last frame, used for time-based updates.
+0x7E20h	CCamera*	Pointer to the active CCamera object. This is the most critical link, connecting the WorldFrame's scene data to the actual camera's viewpoint data.
IV. Relationship with Other Systems

WorldToScreen: Our target function is a client of CGWorldFrame. It reads the final, authoritative state (matrices, viewport dimensions, camera pointer) from the WorldFrame object to perform its calculations. It is a pure utility that operates on the data prepared by UpdateGameWorldFrame.

Raycasting (processWorldFrameTrace): processWorldFrameTrace (0x77F310) is a thin wrapper that simply jumps to traceLineAndProcess (0x7A3B70). The handleWorldRaycast function uses this to perform line-of-sight checks against the world geometry and game objects managed by the WorldFrame.

Interaction (processWorldFrameInteraction): User clicks and mouse movements are funneled into this method on the WorldFrame. It is the central dispatcher that determines what the user is trying to interact with and calls the appropriate handler (HandleTerrainClick, processGameUIInput, etc.).

Graphics Device (g_pCGXDevice): The WorldFrame is a high-level manager. When it's time to actually render, its methods (like renderGameWorld_callback) make calls to the low-level graphics device (g_pCGXDevice) to set matrices, bind shaders, and draw geometry. We see this in processPlayerInteraction where it calls vtable methods on g_pCGXDevice (+0xA0h and +0xA4h) to restore the main projection and view matrices.

Of course. Here is a comprehensive dump of all known addresses and their relationships, structured to provide maximum contextual awareness. This information is derived from the assembly listings and architectural data you've provided.

I. Core Function Addresses

This is the top-level list of functions related to the CGWorldFrame class that were analyzed.

Function Name	Start Address
processWorldFrameEvent	0x004F6970
WorldToScreen	0x004F6D20
processWorldFrameInteraction	0x004F7880
updateWorldFrameLayer	0x004FA040
CGWorldFrame__vector_deleting_destructor	0x004FA560
UpdateGameWorldFrame	0x004FA5F0
InitializeWorldFrame	0x004FABD0
destroyWorldFrame	0x004FAF60
renderWorldFrame_Internal	0x004FB080
allocateAndInitializeWorldFrame	0x0050F3F0
processCameraWorldFrameEvent	0x00518BF0
render_world_from_camera	0x00739630
processWorldFrameTrace	0x0077F310
GetTraceLineImpactPoint	0x0077F540
GameWorld_Initialize	0x00780F50
handleWorldRaycast	0x004F9930
processPlayerInteraction	0x004F9DA0
traceLineAndProcess	0x007A3B70
II. Global Variable & Data Addresses

This section lists the memory addresses of key global variables and data structures.

Name / Description	Address	Type
WorldToScreen Function	0x004F6D20	Function
WorldFrame Global Pointer	0x00B7436C	CGWorldFrame**
g_pCGXDevice Global Pointer	0x00C5DF88	CGXDevice**
qword_CA1238 (Local Player GUID)	0x00CA1238	__int64
dword_CD76AC (Global Timestamp)	0x00CD76AC	unsigned int
aWorldframeCpp String	0x009F9880	char[]
aCworldIntersec String	0x009F9928	char[]
aCgworldframeFi String	0x009F98E0	char[]
off_9F99D8 (CGWorldFrame vtable 1)	0x009F99D8	void**
off_9F9988 (CGWorldFrame vtable 2)	0x009F9988	void**
III. Detailed Function Analysis & Cross-References
CGWorldFrame Lifecycle & Core Loop

allocateAndInitializeWorldFrame (0x0050F3F0)

Purpose: Factory function to allocate memory for and construct the global WorldFrame object.

Calls:

memoryPoolAllocateAndZero

InitializeWorldFrame (0x004FABD0)

Referenced By:

registerGameUiFrames (0x0050F3F0+2)

InitializeWorldFrame (0x004FABD0)

Purpose: The constructor for the CGWorldFrame class. Initializes all member variables and sets the global WorldFrame pointer.

Calls: initializeAndActivateGameObject, resetInternalDataFields, recursively_update_entity_hierarchy, addEntityComponent, fast_memset, SafeMemoryAllocate, CameraInitialize, FindCVarByName, configure_texture_parameters, loadAndCreateTexture, validateSystemStatusArray, registerEventAndInitialize, RegisterGraphicsSettings, InitializeFullScreenGlowEffect, InitFFXDeathEffects, init_netherworld_effect, initializeFFXEffects, UnregisterPlayerFromWorld, initialize_status_object.

Data Access:

Writes to WorldFrame global pointer (0x00B7436C).

Sets vtables off_9F99D8 and off_9F9988.

Allocates and initializes the CCamera object, storing its pointer at [this+0x7E20h].

Referenced By: allocateAndInitializeWorldFrame (0x0050F410)

UpdateGameWorldFrame (0x004FA5F0)

Purpose: The main "tick" function for the world. Called once per frame to update all game logic.

Calls: findObjectByGuidAndFlags, copyGameStateFromMemory, isPlayerCommentatorOrInArena, updateCameraTransformAndState, update_commentator_position_and_orientation, set_player_camera, update_physics_world_transform, process_animation_unit_chain, updateEntityAsync, forwardPhysicsEvent, update_game_world_time, game_object_is_active, GetFarSightObjectIfValid, CalculatePartialRotationData, SendPacketForRendering, countVisibleGameObjects, processGameEntityActivations, updateSceneGraphNodeLink, enumVisibleObjects (with processWorldFrameEvent callback), setCurrentGameState, cleanupAndDestroyGameEntities, process_and_release_game_objects, iterate_and_release_resources, processTimedAsyncOperations, updateGameWorldAndProcessPlayerInput, compute_identity_matrix_transformation, areFloatArraysDifferent_16elements, copyMatrixFloats, monitorPlayerStateAndFps, process_player_action_with_cooldown, updateEntityTimers, handleProjectilePendingSpell, render_world_from_camera, process_world_state_ui_events.

Data Access: Reads WorldFrame+0x7E20h (pActiveCamera), reads qword_CA1238 (LocalPlayerGUID), reads dword_CD76AC (Timestamp).

Referenced By: renderGameWorld_callback (0x004FB0A1+A1)

destroyWorldFrame (0x004FAF60)

Purpose: The destructor for CGWorldFrame. Cleans up all world-related resources.

Calls: shutdownWorldAndReleaseResources, EntityManager_AddEntity_6.

Referenced By: CGWorldFrame__vector_deleting_destructor (0x004FA563)

Core Utility Functions

WorldToScreen (0x004F6D20)

Purpose: Projects a 3D world coordinate to 2D screen space.

Calls: TransformVector4x4, apply_weighted_scalars.

Data Access:

Reads pWorldFrame+0x340h (View-Projection Matrix).

Reads pWorldFrame+0x7E20h (pActiveCamera) to get camera position and near clip plane.

Reads pWorldFrame+0x330h-+0x33Ch and +0x64h-+0x70h (Viewport Dimensions).

Referenced By: handleWorldRaycast, validateUnitTargetingAndVisibility, update_target_indicator, updateCameraTargetPositionAndState, projectWorldToScreenWithOffset, updateEntityScreenPositionAndLoadResource.

processWorldFrameTrace (0x0077F310)

Purpose: Wrapper for the main raycasting function.

Calls: traceLineAndProcess (0x007A3B70)

Referenced By: handleWorldRaycast, CalculateCameraAdjustedPosition, and many others for collision/LoS checks.

Interaction and Event Handling

processWorldFrameInteraction (0x004F7880)

Purpose: Central dispatcher for user interactions (mouse clicks, etc.).

Calls: findObjectByGuidAndFlags, get_local_player_guid, get_global_game_setting_5, processPlayerTargetInteraction, SetPlayerTarget, HandleTerrainClick, processGameUIInput, handle_player_interaction.

Data Access: Reads this+0x2D8h for interaction type.

Referenced By: clear_and_update_camera_controls (0x05FA68D)

processWorldFrameEvent (0x004F6970)

Purpose: Callback function used by UpdateGameWorldFrame's enumVisibleObjects call. Dispatches specific update events to individual game objects.

Calls: findObjectByGuidAndFlags, unit_update_and_process, Entity_ProcessStateTransition_10, conditionallyActivateSpellVisualEffect.

Data Access: Uses a jump table (jpt_4F69AA) to switch on object event type.

Referenced By: UpdateGameWorldFrame (0x004FA7A4) (as a callback)

handleWorldRaycast (0x004F9930)

Purpose: Performs a raycast and processes the result, including transforming the hit point to screen coordinates.

Calls: processWorldFrameTrace, isFinite, NullFunction, computeEntityLinkageAndDistance, WorldToScreen, setCharacterSpeed, findObjectByGuidAndFlags, transformPhysicsStateToMatrix, transform_vector.

Data Access: Uses error strings aCworldIntersec (0x009F9928) and aCgworldframeFi (0x009F98E0).

Referenced By: processPlayerInteraction (0x004F9F00)

